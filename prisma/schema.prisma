// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    imperator
    admin
    user
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    role          Role           @default(user)
    accounts      Account[]
    sessions      Session[]
    threads       Thread[]
    posts         Post[]
    postLikes     PostLike[]
    threadRatings ThreadRating[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id   String @id @default(cuid())
    name String @unique

    subCategories SubCategory[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SubCategory {
    id   String @id @default(cuid())
    name String @unique

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String
    threads    Thread[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Thread {
    id    String @id @default(cuid())
    title String

    user          User           @relation(fields: [userId], references: [id])
    userId        String
    posts         Post[]
    views         View[]
    ratings       ThreadRating[]
    tags          ThreadTag[]
    subCategory   SubCategory    @relation(fields: [subCategoryId], references: [id])
    subCategoryId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, title, userId, subCategoryId])
    // BRIN: https://www.prisma.io/docs/concepts/components/prisma-schema/indexes#block-range-index-brin
    @@index([createdAt], type: Brin)
}

model ThreadTag {
    name String @id @unique

    threads Thread[]

    createdAt DateTime @default(now())

    @@index([name])
}

model ThreadRating {
    id String @id @default(cuid())

    thread   Thread @relation(fields: [threadId], references: [id])
    threadId String
    user     User   @relation(fields: [userId], references: [id])
    userId   String
    rating   Int

    createdAt DateTime @default(now())
}

model Post {
    id      String @id @default(cuid())
    content Json

    user      User         @relation(fields: [userId], references: [id])
    userId    String
    thread    Thread       @relation(fields: [threadId], references: [id])
    threadId  String
    postLikes PostLike[]
    reports   ReportPost[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, userId, threadId])
    // BRIN: https://www.prisma.io/docs/concepts/components/prisma-schema/indexes#block-range-index-brin
    @@index([createdAt], type: Brin)
    // GIN: https //www.prisma.io/docs/concepts/components/prisma-schema/indexes#generalized-inverted-index-gin
    @@index([content], type: Gin)
}

model View {
    id        String @id @default(cuid())
    ipAddress String
    userAgent String

    thread   Thread @relation(fields: [threadId], references: [id])
    threadId String

    createdAt DateTime @default(now())

    @@index([ipAddress, userAgent, threadId])
}

model PostLike {
    id String @id @default(cuid())

    post   Post   @relation(fields: [postId], references: [id])
    postId String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())

    @@index([id, postId, userId])
}

model ReportPost {
    id     String @id @default(cuid())
    reason String

    post   Post   @relation(fields: [postId], references: [id])
    postId String

    createdAt DateTime @default(now())
}
